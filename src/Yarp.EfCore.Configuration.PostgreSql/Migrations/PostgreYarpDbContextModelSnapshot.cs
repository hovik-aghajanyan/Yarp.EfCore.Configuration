// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Yarp.EfCore.Configuration.PostgreSql;

#nullable disable

namespace Yarp.EfCore.Configuration.PostgreSql.Migrations
{
    [DbContext(typeof(PostgreYarpDbContext))]
    partial class PostgreYarpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ActiveHealthCheckConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("Interval")
                        .HasColumnType("interval");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Policy")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Timeout")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("ActiveHealthCheckConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ClusterConfigDestinationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClusterConfigId")
                        .HasColumnType("integer");

                    b.Property<int>("DestinationConfigId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigId");

                    b.HasIndex("DestinationConfigId");

                    b.ToTable("ClusterConfigsDestinations");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ClusterConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClusterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("HealthCheckId")
                        .HasColumnType("integer");

                    b.Property<int?>("HttpClientId")
                        .HasColumnType("integer");

                    b.Property<int?>("HttpRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("LoadBalancingPolicy")
                        .HasColumnType("text");

                    b.Property<int?>("SessionAffinityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique();

                    b.HasIndex("HealthCheckId");

                    b.HasIndex("HttpClientId");

                    b.HasIndex("HttpRequestId");

                    b.HasIndex("SessionAffinityId");

                    b.ToTable("ClusterConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ClusterConfigMetadataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClusterConfigEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClusterConfigEntityId");

                    b.ToTable("ClusterConfigsMetadata");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.DestinationConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Health")
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DestinationConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.DestinationConfigMetadataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DestinationConfigEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DestinationConfigEntityId");

                    b.ToTable("DestinationConfigMetadata");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ForwarderRequestConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("ActivityTimeout")
                        .HasColumnType("interval");

                    b.Property<bool?>("AllowResponseBuffering")
                        .HasColumnType("boolean");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.Property<int?>("VersionPolicy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ForwarderRequestConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.HealthCheckConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveId")
                        .HasColumnType("integer");

                    b.Property<string>("AvailableDestinationsPolicy")
                        .HasColumnType("text");

                    b.Property<int?>("PassiveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActiveId");

                    b.HasIndex("PassiveId");

                    b.ToTable("HealthCheckConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.HttpClientConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("DangerousAcceptAnyServerCertificate")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableMultipleHttp2Connections")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxConnectionsPerServer")
                        .HasColumnType("integer");

                    b.Property<string>("RequestHeaderEncoding")
                        .HasColumnType("text");

                    b.Property<int?>("SslProtocols")
                        .HasColumnType("integer");

                    b.Property<int?>("WebProxyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WebProxyId");

                    b.ToTable("HttpClientConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.PassiveHealthCheckConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Policy")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("ReactivationPeriod")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("PassiveHealthCheckConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ProxyConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RouteConfigId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RouteConfigId");

                    b.HasIndex("Name", "RouteConfigId")
                        .IsUnique();

                    b.ToTable("ProxyConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorizationPolicy")
                        .HasColumnType("text");

                    b.Property<string>("ClusterId")
                        .HasColumnType("text");

                    b.Property<string>("CorsPolicy")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<long?>("MaxRequestBodySize")
                        .HasColumnType("bigint");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("RateLimiterPolicy")
                        .HasColumnType("text");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Timeout")
                        .HasColumnType("interval");

                    b.Property<string>("TimeoutPolicy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("RouteConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteConfigMetadataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RouteConfigEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RouteConfigEntityId");

                    b.ToTable("RouteConfigMetadata");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteHeaderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("boolean");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RouteMatchEntityId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Values")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("RouteMatchEntityId");

                    b.ToTable("RouteHeaders");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteMatchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("Hosts")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Methods")
                        .HasColumnType("text[]");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RouteMatches");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteQueryParameterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("boolean");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RouteMatchEntityId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Values")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("RouteMatchEntityId");

                    b.ToTable("RouteQueryParameters");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.SessionAffinityConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AffinityKeyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CookieId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("FailurePolicy")
                        .HasColumnType("text");

                    b.Property<string>("Policy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CookieId");

                    b.ToTable("SessionAffinityConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.SessionAffinityCookieConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Expiration")
                        .HasColumnType("interval");

                    b.Property<bool?>("HttpOnly")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsEssential")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("MaxAge")
                        .HasColumnType("interval");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int?>("SameSite")
                        .HasColumnType("integer");

                    b.Property<int?>("SecurePolicy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SessionAffinityCookieConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.TransformConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TransformEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransformEntityId");

                    b.ToTable("TransformConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.TransformEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RouteConfigId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RouteConfigId");

                    b.ToTable("Transforms");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.WebProxyConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<bool?>("BypassOnLocal")
                        .HasColumnType("boolean");

                    b.Property<bool?>("UseDefaultCredentials")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("WebProxyConfigs");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ClusterConfigDestinationEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.ClusterConfigEntity", "ClusterConfig")
                        .WithMany("Destinations")
                        .HasForeignKey("ClusterConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarp.EfCore.Configuration.Entities.DestinationConfigEntity", "DestinationConfig")
                        .WithMany()
                        .HasForeignKey("DestinationConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterConfig");

                    b.Navigation("DestinationConfig");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ClusterConfigEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.HealthCheckConfigEntity", "HealthCheck")
                        .WithMany()
                        .HasForeignKey("HealthCheckId");

                    b.HasOne("Yarp.EfCore.Configuration.Entities.HttpClientConfigEntity", "HttpClient")
                        .WithMany()
                        .HasForeignKey("HttpClientId");

                    b.HasOne("Yarp.EfCore.Configuration.Entities.ForwarderRequestConfigEntity", "HttpRequest")
                        .WithMany()
                        .HasForeignKey("HttpRequestId");

                    b.HasOne("Yarp.EfCore.Configuration.Entities.SessionAffinityConfigEntity", "SessionAffinity")
                        .WithMany()
                        .HasForeignKey("SessionAffinityId");

                    b.Navigation("HealthCheck");

                    b.Navigation("HttpClient");

                    b.Navigation("HttpRequest");

                    b.Navigation("SessionAffinity");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ClusterConfigMetadataEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.ClusterConfigEntity", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ClusterConfigEntityId");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.DestinationConfigMetadataEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.DestinationConfigEntity", null)
                        .WithMany("Metadata")
                        .HasForeignKey("DestinationConfigEntityId");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.HealthCheckConfigEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.ActiveHealthCheckConfigEntity", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveId");

                    b.HasOne("Yarp.EfCore.Configuration.Entities.PassiveHealthCheckConfigEntity", "Passive")
                        .WithMany()
                        .HasForeignKey("PassiveId");

                    b.Navigation("Active");

                    b.Navigation("Passive");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.HttpClientConfigEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.WebProxyConfigEntity", "WebProxy")
                        .WithMany()
                        .HasForeignKey("WebProxyId");

                    b.Navigation("WebProxy");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ProxyConfigEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.RouteConfigEntity", "RouteConfig")
                        .WithMany()
                        .HasForeignKey("RouteConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteConfig");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteConfigEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.RouteMatchEntity", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteConfigMetadataEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.RouteConfigEntity", null)
                        .WithMany("Metadata")
                        .HasForeignKey("RouteConfigEntityId");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteHeaderEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.RouteMatchEntity", null)
                        .WithMany("Headers")
                        .HasForeignKey("RouteMatchEntityId");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteQueryParameterEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.RouteMatchEntity", null)
                        .WithMany("QueryParameters")
                        .HasForeignKey("RouteMatchEntityId");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.SessionAffinityConfigEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.SessionAffinityCookieConfigEntity", "Cookie")
                        .WithMany()
                        .HasForeignKey("CookieId");

                    b.Navigation("Cookie");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.TransformConfigEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.TransformEntity", null)
                        .WithMany("TransformConfigs")
                        .HasForeignKey("TransformEntityId");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.TransformEntity", b =>
                {
                    b.HasOne("Yarp.EfCore.Configuration.Entities.RouteConfigEntity", "RouteConfig")
                        .WithMany("Transforms")
                        .HasForeignKey("RouteConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteConfig");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.ClusterConfigEntity", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.DestinationConfigEntity", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteConfigEntity", b =>
                {
                    b.Navigation("Metadata");

                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.RouteMatchEntity", b =>
                {
                    b.Navigation("Headers");

                    b.Navigation("QueryParameters");
                });

            modelBuilder.Entity("Yarp.EfCore.Configuration.Entities.TransformEntity", b =>
                {
                    b.Navigation("TransformConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
